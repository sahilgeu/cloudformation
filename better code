provider "aws" {
  region     = "ap-south-1"  # Modify as per your region
  access_key = "AKIATQZCST35ONLDAM75"
  secret_key = "8V5yPJQzp9YnWm0fW0cc9j7UpKH0f479J4D2Gfle"
}

# Create an IAM policy with the provided S3 permissions
resource "aws_iam_policy" "s3_access_policy" {
  name        = "EC2-S3-Access-Policy"
  description = "Policy to allow EC2 to access specific S3 bucket operations"

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = [
          "s3:PutObject",
          "s3:GetObject",
          "s3:ListBucket",
          "s3:PutObjectAcl",
          "s3:GetObjectVersion"
        ]
        Resource = [
          "arn:aws:s3:::my-cli-bucket123333",        # The bucket itself
          "arn:aws:s3:::my-cli-bucket123333/*"       # All objects within the bucket
        ]
        Effect = "Allow"
      }
    ]
  })
}

# Create an IAM role for EC2 that allows it to assume the role
resource "aws_iam_role" "ec2_s3_access_role" {
  name               = "EC2-S3-Access-Role"
  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = "sts:AssumeRole"
        Principal = {
          Service = "ec2.amazonaws.com"
        }
        Effect   = "Allow"
        Sid      = ""
      }
    ]
  })
}

# Attach the S3 access policy to the IAM role
resource "aws_iam_role_policy_attachment" "s3_access_policy_attachment" {
  role       = aws_iam_role.ec2_s3_access_role.name
  policy_arn = aws_iam_policy.s3_access_policy.arn
}

# Attach the SSM policy to the IAM role
resource "aws_iam_role_policy_attachment" "ssm_access_policy_attachment" {
  role       = aws_iam_role.ec2_s3_access_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
}

resource "aws_iam_instance_profile" "ec2_s3_access_profile" {
  name = "EC2-S3-Access-Profile"
  role = aws_iam_role.ec2_s3_access_role.name
}

# Create a security group to allow RDP access to Windows EC2 instance
resource "aws_security_group" "ec2_sg" {
  name        = "EC2-SG"
  description = "Allow RDP access to Windows EC2 instance"

  ingress {
    from_port   = 3389
    to_port     = 3389
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]  # Update for tighter security
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_key_pair" "my_key" {
  key_name   = "my-key-pair"
  public_key = file("~/.ssh/my-key-pair.pub")  # Path to your public key
}


# Launch Windows EC2 instance
resource "aws_instance" "winstance" {
  ami                  = "ami-05a00967f06885a63"  # Use the latest Windows Server AMI for your region
  instance_type        = "t3.micro"  # Modify as per your needs
  key_name = aws_key_pair.my_key.key_name
  vpc_security_group_ids = [aws_security_group.ec2_sg.id]
  iam_instance_profile = aws_iam_instance_profile.ec2_s3_access_profile.name

  user_data = <<-EOF
              <powershell>
                # Define variables
                $bucketName = "my-cli-bucket123333"
                $fileName = "awscli.zip"
                $downloadPath = "C:\\temp\\$fileName"
                $unzipPath = "C:\\temp\\awscli"

                # Ensure the destination directories exist
                New-Item -ItemType Directory -Force -Path "C:\\temp"

                # Download the AWS CLI zip file from S3
                Write-Host "Downloading AWS CLI from S3..."
                aws s3 cp "s3://$bucketName/$fileName" $downloadPath

                # Unzip the downloaded file
                Write-Host "Unzipping AWS CLI..."
                Expand-Archive -Path $downloadPath -DestinationPath $unzipPath -Force

                # Install the AWS CLI
                Write-Host "Installing AWS CLI..."
                $installScript = "$unzipPath\\install.ps1"
                if (Test-Path -Path $installScript) {
                    & $installScript
                } else {
                    Write-Host "Error: Installation script not found."
                }

                # Clean up the downloaded and extracted files
                Write-Host "Cleaning up..."
                Remove-Item -Path $downloadPath -Force
                Remove-Item -Path $unzipPath -Recurse -Force

                Write-Host "AWS CLI installation completed."
              </powershell>
            EOF

  tags = {
    Name = "Windows-EC2"
